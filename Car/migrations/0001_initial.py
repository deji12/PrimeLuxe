# Generated by Django 5.2.5 on 2025-08-07 15:05

import django.db.models.deletion
import django_ckeditor_5.fields
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='CarAmenity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name of the car amenity (e.g., Bluetooth, Sunroof, Navigation).', max_length=100, unique=True)),
                ('icon', models.CharField(blank=True, help_text='Optional icon class or reference used to visually represent the amenity.', max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Car',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The display name of the car (e.g., Mercedes G-Wagon).', max_length=100)),
                ('brand', models.CharField(choices=[('Acura', 'Acura'), ('Alfa Romeo', 'Alfa Romeo'), ('Aston Martin', 'Aston Martin'), ('Audi', 'Audi'), ('Bentley', 'Bentley'), ('BMW', 'BMW'), ('Bugatti', 'Bugatti'), ('Cadillac', 'Cadillac'), ('Ferrari', 'Ferrari'), ('Genesis', 'Genesis'), ('Infiniti', 'Infiniti'), ('Jaguar', 'Jaguar'), ('Koenigsegg', 'Koenigsegg'), ('Lamborghini', 'Lamborghini'), ('Land Rover', 'Land Rover'), ('Lexus', 'Lexus'), ('Lincoln', 'Lincoln'), ('Lotus', 'Lotus'), ('Lucid', 'Lucid'), ('Maserati', 'Maserati'), ('Maybach', 'Maybach'), ('McLaren', 'McLaren'), ('Mercedes-Benz', 'Mercedes-Benz'), ('Pagani', 'Pagani'), ('Porsche', 'Porsche'), ('Rolls-Royce', 'Rolls-Royce'), ('Tesla', 'Tesla')], help_text='The brand or manufacturer of the car (e.g., Mercedes, BMW).', max_length=50)),
                ('list_description', models.TextField(blank=True, help_text='A short summary of the car shown in list views.', null=True)),
                ('detailed_description', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text='A detailed and formatted description shown on the car detail page.', null=True, verbose_name='Text')),
                ('slug', models.SlugField(blank=True, help_text='URL-friendly identifier for the car, auto-generated from the name.', max_length=100, null=True, unique=True)),
                ('image', models.ImageField(blank=True, help_text='Main image of the car used in listings.', null=True, upload_to='cars/')),
                ('body_type', models.CharField(choices=[('sedan', 'Sedan'), ('suv', 'SUV'), ('hatchback', 'Hatchback'), ('convertible', 'Convertible'), ('coupe', 'Coupe'), ('wagon', 'Wagon'), ('pickup', 'Pickup Truck')], default='sedan', help_text='The body style of the car, such as SUV, Sedan, Coupe, etc.', max_length=20)),
                ('seats', models.PositiveIntegerField(default=4, help_text='The number of passenger seats in the car.')),
                ('doors', models.PositiveIntegerField(default=4, help_text='The number of doors available on the car.')),
                ('price_per_day', models.DecimalField(decimal_places=2, help_text='Daily rental price for the car.', max_digits=10)),
                ('is_available', models.BooleanField(default=True, help_text='Toggle whether the car is currently available for booking.')),
                ('fuel_type', models.CharField(choices=[('petrol', 'Petrol'), ('diesel', 'Diesel'), ('electric', 'Electric'), ('hybrid', 'Hybrid')], default='petrol', help_text='Type of fuel the car uses (Petrol, Diesel, Electric, etc.).', max_length=20)),
                ('horsepower', models.PositiveIntegerField(help_text='The carâ€™s engine power measured in horsepower.')),
                ('transmission', models.CharField(default='automatic', help_text='Type of transmission system (e.g., Automatic, Manual).', max_length=20)),
                ('video_link', models.URLField(blank=True, help_text='Optional video URL showcasing the car.', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the car entry was created.')),
                ('amenities', models.ManyToManyField(help_text='Select all available amenities for this car.', related_name='cars', to='Car.caramenity')),
            ],
        ),
        migrations.CreateModel(
            name='CarImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(help_text='An additional image for this car.', upload_to='car_images/')),
                ('car', models.ForeignKey(help_text='The car this image is associated with.', on_delete=django.db.models.deletion.CASCADE, related_name='images', to='Car.car')),
            ],
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the person leaving the review.', max_length=100)),
                ('email', models.EmailField(help_text='Email address of the reviewer.', max_length=254)),
                ('message', models.TextField(help_text='Content of the review message.')),
                ('rating', models.PositiveSmallIntegerField(default=0, help_text='Rating given by the user (1 to 5 stars).')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time the review was submitted.')),
                ('car', models.ForeignKey(help_text='The car that this review is about.', on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='Car.car')),
            ],
        ),
    ]
